<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-suite.xml" />
	<munit:test name="UT01-postProduct-test" doc:id="a794f399-3952-4203-b7e4-02554696ba01" >
		<munit:behavior >
			<munit-tools:spy doc:name="Spy Set Payload" doc:id="6c1f20e2-ab52-48a4-91ae-4c65247b707f" processor="set-payload">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="2c406f8c-a47c-4c9f-a2e1-ba9f20fa781a" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="7fe8c2fa-b250-4547-9b4b-53fad1ed10bd" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import UT01postProducttest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="2fa406b0-6bce-4e5e-8f26-d45836a13c79" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import UT01postProducttest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="4ba8dc15-17ef-402c-9d82-9326fdc6fd5f" >
				<munit:payload value="#[output application/json --- readUrl('classpath://UT01postProducttest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://UT01postProducttest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://UT01postProducttest\set-event_variable_.dwl')]" />
					<munit:variable key="orderID" value="#[output application/json --- readUrl('classpath://UT01postProducttest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postProduct" doc:id="cda59051-49d2-431d-98d2-2cfe5b47a412" name="postProduct"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="7e73f068-1d58-48a8-b111-e0f0ccce0b4b" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import UT01postProducttest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Set Payload" doc:id="32791b99-af24-46c9-90ac-056e265aa2f4" processor="set-payload" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="2c406f8c-a47c-4c9f-a2e1-ba9f20fa781a" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="UT-02-getProductDetailsFlow-test" doc:id="a8004033-67b3-4f0f-b8ae-76f1b3023da1" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Walmart API Request" doc:id="237f9566-ac91-41c2-93a0-eef261743f67" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6deb8dea-387d-42fe-9066-02f3a49a7009" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://UT02getProductDetailsFlowtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="d2e10c82-2899-435e-9cad-487d441a6382" >
				<munit:payload value="#[readUrl('classpath://UT02getProductDetailsFlowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://UT02getProductDetailsFlowtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://UT02getProductDetailsFlowtest\set-event_variable_.dwl')]" />
					<munit:variable key="httpVar" value="#[output application/java --- readUrl('classpath://UT02getProductDetailsFlowtest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getProductDetailsFlow" doc:id="7e01878c-0200-407c-bbd2-d361720bce2b" name="getProductDetailsFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="9891560f-3da0-470c-b739-9539fe8674e0" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import UT02getProductDetailsFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="UT03getStoreDetailsFlow-test" doc:id="e7b8fea9-e22a-477b-9658-d69a53b9aa5c" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="186eb13e-f1b9-4c1d-9c2c-04beeb569b36" >
				<munit:payload value="#[readUrl('classpath://UT03getStoreDetailsFlowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://UT03getStoreDetailsFlowtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://UT03getStoreDetailsFlowtest\set-event_variable_.dwl')]" />
					<munit:variable key="httpVar" value="#[output application/java --- readUrl('classpath://UT03getStoreDetailsFlowtest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getStoreDetailsFlow" doc:id="c1282296-18aa-4239-9552-386f82a98897" name="getStoreDetailsFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b7a910e2-f72b-4a3b-81a2-261cdbc182ff" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import UT03getStoreDetailsFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify minDistance" doc:id="6a40e42c-6c47-4703-9fa4-6062948c1d18" processor="set-variable" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="41a90bd4-3800-450c-bc8b-19d0986e66ab" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>


</mule>
